// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheArtMarketplacePlatform.DataAccessLayer;

#nullable disable

namespace TheArtMarketplacePlatform.DataAccessLayer.Migrations
{
    [DbContext(typeof(TheArtMarketplacePlatformDbContext))]
    partial class TheArtMarketplacePlatformDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.ArtisanProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("ArtisanProfiles");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.CustomerProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId");

                    b.ToTable("CustomerProfiles");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.DeliveryPartnerProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.ToTable("DeliveryPartnerProfiles");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.DeliveryStatusUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("DeliveryStatusUpdates");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeliveryPartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryPartnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryPartnerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArtisanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtisanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Art");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("QuantityLeft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("OutOfStock");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.ToTable("Products", t =>
                        {
                            t.HasCheckConstraint("CK_Product_QuantityLeft", "QuantityLeft >= 0");
                        });
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArtisanProfileUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArtisanResponse")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CustomerComment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanProfileUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews", t =>
                        {
                            t.HasCheckConstraint("CK_ProductReview_Rating", "Rating >= 1 AND Rating <= 5");
                        });
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasAnnotation("RegularExpression", "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Customer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Active");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("RegularExpression", "^[a-zA-Z0-9_]+$");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.ArtisanProfile", b =>
                {
                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.User", "User")
                        .WithOne("ArtisanProfile")
                        .HasForeignKey("TheArtMarketplacePlatform.Core.Entities.ArtisanProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.CustomerProfile", b =>
                {
                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.User", "User")
                        .WithOne("CustomerProfile")
                        .HasForeignKey("TheArtMarketplacePlatform.Core.Entities.CustomerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.DeliveryPartnerProfile", b =>
                {
                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.User", "User")
                        .WithOne("DeliveryPartnerProfile")
                        .HasForeignKey("TheArtMarketplacePlatform.Core.Entities.DeliveryPartnerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.DeliveryStatusUpdate", b =>
                {
                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.Order", "Order")
                        .WithMany("DeliveryStatusUpdates")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.Order", b =>
                {
                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.CustomerProfile", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.DeliveryPartnerProfile", "DeliveryPartner")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryPartnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("DeliveryPartner");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.OrderProduct", b =>
                {
                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.Product", b =>
                {
                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.ArtisanProfile", "Artisan")
                        .WithMany("Products")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.ProductReview", b =>
                {
                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.ArtisanProfile", null)
                        .WithMany("ProductReviews")
                        .HasForeignKey("ArtisanProfileUserId");

                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.CustomerProfile", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TheArtMarketplacePlatform.Core.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.ArtisanProfile", b =>
                {
                    b.Navigation("ProductReviews");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.CustomerProfile", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.DeliveryPartnerProfile", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.Order", b =>
                {
                    b.Navigation("DeliveryStatusUpdates");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("TheArtMarketplacePlatform.Core.Entities.User", b =>
                {
                    b.Navigation("ArtisanProfile");

                    b.Navigation("CustomerProfile");

                    b.Navigation("DeliveryPartnerProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
